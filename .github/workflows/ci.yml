name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Run type check
      run: npm run typecheck
      
    - name: Run tests
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Validate holiday definitions
      run: npm run validate-holidays
      
    - name: Analyze bundle size
      run: npm run size
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: dist/

  performance:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance tests
      run: npm run test:performance
      
    - name: Generate performance report
      run: |
        mkdir -p reports
        npm run test:performance -- --json > reports/performance.json
      
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: reports/

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Run dependency check
      run: |
        npx license-checker --summary
        npx depcheck

  multi-platform:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [16.x, 18.x, 20.x]
      fail-fast: false
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Run type check
      run: npm run typecheck
      
    - name: Run all tests
      run: npm test
      
    - name: Run timezone-specific tests
      run: |
        npm test -- --testPathPattern="timezone"
        npm test -- --testPathPattern="locale"
      env:
        TZ: 'America/New_York'
      
    - name: Run date parsing tests
      run: npm test -- --testPathPattern="parse"
      
    - name: Build project
      run: npm run build
      
    - name: Test build artifacts
      run: |
        node -e "const kairos = require('./dist/index.js'); console.log(kairos.default().format('YYYY-MM-DD'));"
        node -e "const { Kairos } = require('./dist/index.js'); console.log(new Kairos().format('YYYY-MM-DD'));"

  publish-dry-run:
    runs-on: ubuntu-latest
    needs: [test, build, performance]
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Dry run publish
      run: npm publish --dry-run
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  integration-tests:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run integration tests
      run: npm run test -- --testPathPattern="integration"
      
    - name: Test example files
      run: |
        npm run build
        node examples/basic-usage.js
        node examples/multi-locale.js
        node examples/business-calendar.js
        node examples/advanced-usage.js

  notify:
    runs-on: ubuntu-latest
    needs: [test, build, performance, security, multi-platform]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.test.result == 'success' && needs.build.result == 'success'
      run: echo "✅ All checks passed!"
      
    - name: Notify failure
      if: needs.test.result == 'failure' || needs.build.result == 'failure'
      run: echo "❌ Some checks failed!"