name: Continuous Deployment

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm run test:coverage
    
    - name: Check test coverage
      run: |
        COVERAGE=$(npx nyc report --reporter=text-summary | grep 'Lines' | awk '{print $3}' | sed 's/%//')
        if (( $(echo "$COVERAGE < 90" | bc -l) )); then
          echo "Test coverage is below 90%"
          exit 1
        fi
      continue-on-error: true
    
    - name: Run security audit
      run: |
        npm audit --audit-level=high
        node tools/security-audit.js
    
    - name: Validate build
      run: npm run build
    
    - name: Check bundle size
      run: npm run size

  build-and-publish:
    name: Build and Publish
    needs: validate
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
    
    - name: Update package version
      run: |
        npm version ${{ steps.version.outputs.version }} --no-git-tag-version
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add package.json package-lock.json
        git commit -m "chore: bump version to ${{ steps.version.outputs.version }}"
      continue-on-error: true
    
    - name: Build all formats
      run: |
        npm run clean
        npm run build
        npm run build:browser
    
    - name: Create tarball
      run: npm pack
    
    - name: Generate changelog
      id: changelog
      run: |
        echo "# Release Notes for v${{ steps.version.outputs.version }}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          git log --pretty=format:"- %s (%h)" >> RELEASE_NOTES.md
        else
          git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" >> RELEASE_NOTES.md
        fi
        
        echo "" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## Installation" >> RELEASE_NOTES.md
        echo '```bash' >> RELEASE_NOTES.md
        echo "npm install @oxog/kairos@${{ steps.version.outputs.version }}" >> RELEASE_NOTES.md
        echo '```' >> RELEASE_NOTES.md
    
    - name: Publish to npm
      run: |
        if [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
          npm publish --tag beta --access public
        else
          npm publish --access public
        fi
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts
        path: |
          dist/
          *.tgz
          RELEASE_NOTES.md

  create-github-release:
    name: Create GitHub Release
    needs: build-and-publish
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.build-and-publish.outputs.version }}
        name: Release v${{ needs.build-and-publish.outputs.version }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: ${{ github.event.inputs.prerelease == 'true' }}
        files: |
          *.tgz
          dist/kairos.umd.min.js
          dist/kairos.esm.min.js
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-docs:
    name: Publish Documentation
    needs: create-github-release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build documentation
      run: |
        npm run docs:build
        echo "kairos.js.org" > docs/generated/CNAME
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/generated
        cname: kairos.js.org

  notify:
    name: Send Notifications
    needs: [build-and-publish, create-github-release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify success
      if: needs.build-and-publish.result == 'success'
      run: |
        echo "‚úÖ Release v${{ needs.build-and-publish.outputs.version }} published successfully!"
        echo "üì¶ npm: https://www.npmjs.com/package/@oxog/kairos"
        echo "üîó GitHub: https://github.com/ersinkoc/kairos/releases/tag/v${{ needs.build-and-publish.outputs.version }}"
    
    - name: Notify failure
      if: needs.build-and-publish.result == 'failure'
      run: |
        echo "‚ùå Release failed! Please check the logs."